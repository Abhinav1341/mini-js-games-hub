name: Conditional Auto Merge

on:
  pull_request:
    types: [opened, reopened, synchronize, edited, labeled]

env:
  WORKFLOW_ENV: ${{ secrets.WORKFLOW_ENV }} # set to 'development' or 'production'

jobs:
  conditional-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR info
        id: pr_info
        run: |
          echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Extract issue number from PR title
        id: extract
        run: |
          TITLE="${{ steps.pr_info.outputs.title }}"
          if [[ "$TITLE" =~ \[#([0-9]+)\] ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle missing issue reference
        if: steps.extract.outputs.found == 'false'
        run: |
          gh pr comment ${{ steps.pr_info.outputs.pr_number }} \
            --body "‚ö†Ô∏è @${{ steps.pr_info.outputs.author }} Please include the related issue number in your PR title (e.g., [#123]) so it can be auto-linked and merged."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate issue author
        if: steps.extract.outputs.found == 'true'
        id: validate
        run: |
          ISSUE_AUTHOR=$(gh issue view ${{ steps.extract.outputs.issue_number }} --json user --jq '.user.login' || echo "none")
          if [ "$ISSUE_AUTHOR" = "${{ steps.pr_info.outputs.author }}" ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi
          echo "issue_author=$ISSUE_AUTHOR" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle invalid issue author
        if: steps.validate.outputs.valid == 'false'
        run: |
          gh pr comment ${{ steps.pr_info.outputs.pr_number }} \
            --body "‚ö†Ô∏è Issue #${{ steps.extract.outputs.issue_number }} is not opened by @${{ steps.pr_info.outputs.author }} (opened by @${{ steps.validate.outputs.issue_author }}). Manual merge required."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for merge conflicts
        if: steps.validate.outputs.valid == 'true'
        id: conflict_check
        run: |
          MERGEABLE=$(gh pr view ${{ steps.pr_info.outputs.pr_number }} --json mergeable --jq '.mergeable')
          if [ "$MERGEABLE" = "CONFLICTING" ]; then
            echo "conflict=true" >> $GITHUB_OUTPUT
          else
            echo "conflict=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle merge conflicts
        if: steps.conflict_check.outputs.conflict == 'true'
        run: |
          gh pr comment ${{ steps.pr_info.outputs.pr_number }} \
            --body "‚ö†Ô∏è @${{ steps.pr_info.outputs.author }} your PR #${{ steps.pr_info.outputs.pr_number }} has merge conflicts with the base branch. Please resolve conflicts manually before auto-merge can continue."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy labels from issue
        if: steps.validate.outputs.valid == 'true' && steps.conflict_check.outputs.conflict == 'false'
        run: |
          LABELS=$(gh issue view ${{ steps.extract.outputs.issue_number }} --json labels --jq '.labels[].name')
          for label in $LABELS; do
            gh pr edit ${{ steps.pr_info.outputs.pr_number }} --add-label "$label"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Assign PR author
        if: steps.validate.outputs.valid == 'true' && steps.conflict_check.outputs.conflict == 'false'
        run: gh pr edit ${{ steps.pr_info.outputs.pr_number }} --add-assignee "${{ steps.pr_info.outputs.author }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge PR (only in production)
        if: steps.validate.outputs.valid == 'true' && steps.conflict_check.outputs.conflict == 'false' && env.WORKFLOW_ENV == 'production'
        run: gh pr merge ${{ steps.pr_info.outputs.pr_number }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment for dev mode (skip merge)
        if: steps.validate.outputs.valid == 'true' && steps.conflict_check.outputs.conflict == 'false' && env.WORKFLOW_ENV == 'development'
        run: |
          gh pr comment ${{ steps.pr_info.outputs.pr_number }} \
            --body "‚ö†Ô∏è Workflow is in development mode ‚Äî PR #${{ steps.pr_info.outputs.pr_number }} is **not merged automatically**. All other actions (labels, assignments, validations) are applied."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment after merge (production)
        if: steps.validate.outputs.valid == 'true' && steps.conflict_check.outputs.conflict == 'false' && env.WORKFLOW_ENV == 'production'
        run: |
          gh pr comment ${{ steps.pr_info.outputs.pr_number }} \
            --body "üéâ @${{ steps.pr_info.outputs.author }} your PR has been successfully merged and linked issue #${{ steps.extract.outputs.issue_number }} has been closed. Thank you for your contribution üöÄ"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close linked issue (production)
        if: steps.validate.outputs.valid == 'true' && steps.conflict_check.outputs.conflict == 'false' && env.WORKFLOW_ENV == 'production'
        run: gh issue close ${{ steps.extract.outputs.issue_number }} --comment "‚úÖ Closed automatically after PR merge by @${{ steps.pr_info.outputs.author }}."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
